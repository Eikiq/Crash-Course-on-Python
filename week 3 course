#while loop:
# 2 mistakes need to pay attention: Always check to initilizing ur variable. B: make sure it's not loop, 叠加 +=
initiation x=?
while x??:  #check x是否满足条件
  print  #body print message under current situation
  x???   #body move on to next operation, then loop back to while for checking.
print()

x=1
product=1
while x < 10:
  product = product * x
  x+=1
  
def attempts(n):
  x=1
  while x <=n:
    print('attempt' + str(x))
    x+=1
  print('done')
attempt(5)

#answer
attempt1
attempt2
attempt3
attempt4
attempt5
done


def count_down(start_number):
  current=start_number
  while (current > 0):
    print(current)
    current -= 1
  print("Zero!")

count_down(3)


#avoid infinite loop
def print_range(start, end):
	# Loop through the numbers from start to end
	n = start
	while n <= end:
		print(n)   #如果不加 就一直是1111111111
    
 print_range(1, 5)  # Should print 1 2 3 4 5 (each number on its own line) 
		n+=1
    
    
 #quiz 5
 def multiplication_table(number):
	# Initialize the starting point of the multiplication table
	multiplier = 1
	# Only want to loop through 5
	while multiplier <= 5:
		result = number*multiplier
		# What is the additional condition to exit out of the loop?
		if result > 25 :
			break
		print(str(number) + "x" + str(multiplier) + "=" + str(result))
		# Increment the variable for the loop
		multiplier += 1

multiplication_table(3) 
# Should print: 3x1=3 3x2=6 3x3=9 3x4=12 3x5=15

multiplication_table(5) 
# Should print: 5x1=5 5x2=10 5x3=15 5x4=20 5x5=25

#pruduct=1 #定义一个函数
for n in range(1,10): #给n一个range
  product=product*n #新的变量值
print(product)


def factorial(n):
    result = 1
    for i in range(1,n+1):
        result*=i  #*=5 #x *= 5	x = x * 5
    return result

print(factorial(4)) # should return 24
print(factorial(5)) # should return 120
multiplication_table(8)	
# Should print: 8x1=8 8x2=16 8x3=24


def factorial(n):
    result = 1
    for x in range(1,n):
        result =result*n
        n=n-1  #注意 Because you need all the numbers between 0 and 10, so if n= 10, 
	        to get the next numbers you should subtract, example n= n-1, so for each iteration n is getting smaller until 0.
    return result

for n in range(1,10):
    print(n, factorial(n))

#quiz 4 Question 4
Fill in the empty function so that it returns the sum of all the divisors of a number, without including it. 
A divisor is a number that divides into another without a remainder.

def sum_divisors(n):
  i = 1
  sum = 0
  # Return the sum of all divisors of n, not including n
  while i<n:
   if n%i==0:
      sum += i
      i+=1
   else:
      i+=1
  return sum
  


print(sum_divisors(0))
# 0
print(sum_divisors(3)) # Should sum of 1
# 1
print(sum_divisors(36)) # Should sum of 1+2+3+4+6+9+12+18
# 55
print(sum_divisors(102)) # Should be sum of 2+3+6+17+34+51
# 114



#for loop：allow you to iterate over a sequence of values
def square(n):
    return n*n

def sum_squares(x):
    sum = 0
    for n in range(x):
        sum +=n*n
    return sum

print(sum_squares(10)) # Should be 285

def validate_users(users):
  for user in [users]: #如果不加【】 打出来会是个别字母 figured out that you needed to call the function with a list instead of just a string
    if len(users)>=3:
      print(user + " is valid")
    else:
      print(user + " is invalid")

validate_users("purplecat")
